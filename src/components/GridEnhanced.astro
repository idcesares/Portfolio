---
interface Props {
	variant?: 'offset' | 'small' | 'compact' | 'list';
}

const { variant = 'offset' } = Astro.props;
---

<ul class:list={[
	'grid', 
	{ 
		offset: variant === 'offset',
		small: variant === 'small',
		compact: variant === 'compact',
		list: variant === 'list'
	}
]}>
	<slot />
</ul>

<style>
	.grid {
		display: grid;
		grid-auto-rows: 1fr;
		gap: 1rem;
		list-style: none;
		padding: 0;
		margin: 0;
	}

	.grid.small {
		grid-template-columns: 1fr 1fr;
		gap: 1.5rem;
	}

	.grid.compact {
		grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
		gap: 1rem;
		grid-auto-rows: auto;
	}

	.grid.list {
		grid-template-columns: 1fr;
		gap: 0.75rem;
		grid-auto-rows: auto;
	}

	/* If last row contains only one item, make it span both columns. */
	.grid.small > :global(:last-child:nth-child(odd)) {
		grid-column: 1 / 3;
	}

	@media (min-width: 50em) {
		.grid {
			grid-template-columns: 1fr 1fr;
			gap: 4rem;
		}

		.grid.offset {
			--row-offset: 7.5rem;
			padding-bottom: var(--row-offset);
		}

		/* Shift first item in each row vertically to create staggered effect. */
		.grid.offset > :global(:nth-child(odd)) {
			transform: translateY(var(--row-offset));
		}

		/* If last row contains only one item, display it in the second column. */
		.grid.offset > :global(:last-child:nth-child(odd)) {
			grid-column: 2 / 3;
			transform: translateY(var(--row-offset));
		}

		.grid.small {
			grid-template-columns: repeat(3, 1fr);
			gap: 2rem;
		}

		.grid.small > :global(:last-child:nth-child(3n-1)) {
			grid-column: 2 / 4;
		}

		.grid.compact {
			grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
			gap: 1.5rem;
		}

		.grid.list {
			gap: 1rem;
		}
	}

	@media (min-width: 75em) {
		.grid.compact {
			grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
			gap: 2rem;
		}

		.grid.small {
			grid-template-columns: repeat(4, 1fr);
		}
	}
</style>
