---
import Icon from './Icon.astro';

interface Props {
  placeholder?: string;
}

const { placeholder = "Pesquise posts e projetos..." } = Astro.props;
---

<div class="search-container">
  <div class="search-box">
    <Icon icon="magnifying-glass" class:list="search-icon" />
    <input
      type="text"
      id="search-input"
      placeholder={placeholder}
      class="search-input"
    />
    <button type="button" class="search-clear" id="search-clear">
      <span class="sr-only">Limpar busca</span>
      Ã—
    </button>
  </div>
  <div id="search-results" class="search-results hidden"></div>
</div>

<style>
  .search-container {
    position: relative;
    max-width: 600px;
    margin: 0 auto;
    width: 100%;
  }

  .search-box {
    position: relative;
    display: flex;
    align-items: center;
  }

  .search-icon {
    position: absolute;
    left: 0.625rem;
    z-index: 1;
    color: var(--gray-500);
    pointer-events: none;
    font-size: 1rem;
  }

  .search-input {
    width: 100%;
    padding: 0.625rem 2.25rem 0.625rem 2.25rem;
    border: 1px solid var(--gray-800);
    border-radius: 0.5rem;
    background: var(--gray-999);
    color: var(--gray-200);
    font-size: var(--text-sm);
    transition: border-color 0.2s ease;
  }

  .search-input:focus {
    outline: none;
    border-color: var(--accent-regular);
    box-shadow: 0 0 0 2px var(--accent-regular-alpha);
  }

  .search-input::placeholder {
    color: var(--gray-500);
  }

  .search-clear {
    position: absolute;
    right: 0.5rem;
    background: none;
    border: none;
    color: var(--gray-400);
    font-size: 1rem;
    cursor: pointer;
    padding: 0.125rem;
    border-radius: 0.25rem;
    transition: color 0.2s ease;
  }

  .search-clear:hover {
    color: var(--gray-200);
  }

  .search-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: var(--gray-999);
    border: 1px solid var(--gray-800);
    border-top: none;
    border-radius: 0 0 0.5rem 0.5rem;
    max-height: 350px;
    overflow-y: auto;
    z-index: 100;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .search-results.hidden {
    display: none;
  }

  :global(.search-result-item) {
    display: block;
    padding: 0.75rem 1rem;
    border-bottom: 1px solid var(--gray-800);
    cursor: pointer;
    text-decoration: none;
    color: inherit;
    transition: background-color 0.2s ease;
  }

  :global(.search-result-item:hover) {
    background: var(--gray-800);
  }

  :global(.search-result-item:last-child) {
    border-bottom: none;
  }

  :global(.search-result-title) {
    font-weight: 600;
    color: var(--gray-0);
    margin-bottom: 0.25rem;
    font-size: var(--text-base);
  }

  :global(.search-result-description) {
    font-size: var(--text-sm);
    color: var(--gray-300);
    line-height: 1.4;
  }

  :global(.search-result-type) {
    font-size: var(--text-xs);
    color: var(--accent-regular);
    text-transform: uppercase;
    font-weight: 600;
    letter-spacing: 0.05em;
    margin-bottom: 0.25rem;
  }

  :global(.search-no-results) {
    padding: 1rem;
    text-align: center;
    color: var(--gray-400);
    font-style: italic;
  }

  /* Light theme adjustments */
  :global([data-theme="light"]) .search-input {
    background: var(--gray-0);
    color: var(--gray-800);
    border-color: var(--gray-300);
  }

  :global([data-theme="light"]) .search-input::placeholder {
    color: var(--gray-600);
  }

  :global([data-theme="light"]) .search-icon {
    color: var(--gray-600);
  }

  :global([data-theme="light"]) .search-results {
    background: var(--gray-0);
    border-color: var(--gray-300);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  :global([data-theme="light"]) :global(.search-result-item) {
    border-bottom-color: var(--gray-200);
  }

  :global([data-theme="light"]) :global(.search-result-item:hover) {
    background: var(--gray-100);
  }

  :global([data-theme="light"]) :global(.search-result-title) {
    color: var(--gray-800);
  }

  :global([data-theme="light"]) :global(.search-result-description) {
    color: var(--gray-600);
  }

  /* Desktop adjustments */
  @media (min-width: 50em) {
    .search-input {
      padding: 0.5rem 2rem 0.5rem 2rem;
      font-size: var(--text-sm);
    }

    .search-icon {
      left: 0.5rem;
      font-size: 0.875rem;
    }

    .search-clear {
      right: 0.375rem;
      font-size: 0.875rem;
    }

    .search-results {
      max-height: 300px;
    }

    :global(.search-result-item) {
      padding: 0.625rem 0.875rem;
    }

    :global(.search-result-title) {
      font-size: var(--text-sm);
      margin-bottom: 0.125rem;
    }

    :global(.search-result-description) {
      font-size: var(--text-xs);
    }

    :global(.search-result-type) {
      font-size: 0.625rem;
      margin-bottom: 0.125rem;
    }
  }
</style>

<script>
  import Fuse, { type FuseResult, type FuseResultMatch } from 'fuse.js';
  import type { SearchItem } from '../utils/searchData';

  class SearchManager {
    private fuse: Fuse<SearchItem> | null = null;
    private searchData: SearchItem[] = [];

    constructor() {
      this.init();
    }

    async init() {
      // Load search data
      try {
        const response = await fetch('/search-data.json');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        this.searchData = Array.isArray(data) ? data : data.data || [];
        
        this.fuse = new Fuse(this.searchData, {
          keys: [
            { name: 'title', weight: 0.4 },
            { name: 'description', weight: 0.3 },
            { name: 'content', weight: 0.2 },
            { name: 'tags', weight: 0.1 }
          ],
          threshold: 0.3,
          includeMatches: true,
          minMatchCharLength: 2,
          ignoreLocation: true,
        });

        this.setupAllSearchInstances();
      } catch (error) {
        console.error('Failed to load search data:', error);
        // Initialize with empty data and still setup the UI
        this.searchData = [];
        this.setupAllSearchInstances();
      }
    }

    setupAllSearchInstances() {
      // Find the search input element in the modal and set it up
      const searchInput = document.querySelector('#search-input') as HTMLInputElement;
      const searchResults = document.querySelector('#search-results') as HTMLElement;
      const searchClear = document.querySelector('#search-clear') as HTMLElement;
      
      if (searchInput && searchResults && searchClear) {
        this.setupSearchInstance(searchInput, searchResults, searchClear);
      }
    }

    setupSearchInstance(searchInput: HTMLInputElement, searchResults: HTMLElement, searchClear: HTMLElement) {
      // Mark as initialized to prevent double initialization
      searchInput.setAttribute('data-search-initialized', 'true');
      
      searchInput.addEventListener('input', (e: Event) => {
        const query = (e.target as HTMLInputElement).value;
        this.performSearch(query, searchResults);
      });

      searchInput.addEventListener('focus', (e: Event) => {
        const query = (e.target as HTMLInputElement).value;
        if (query.length >= 2) {
          this.performSearch(query, searchResults);
        }
      });

      searchClear.addEventListener('click', () => {
        this.clearSearch(searchInput, searchResults);
      });

      // Handle Escape key
      searchInput.addEventListener('keydown', (e: KeyboardEvent) => {
        if (e.key === 'Escape') {
          this.hideResults(searchResults);
          searchInput.blur();
        }
      });

      // Close results when clicking outside
      document.addEventListener('click', (e: Event) => {
        const target = e.target as Node;
        if (!searchInput.contains(target) && !searchResults.contains(target)) {
          this.hideResults(searchResults);
        }
      });
    }

    performSearch(query: string, searchResults: HTMLElement) {
      if (!this.fuse) {
        this.displayNoResults(searchResults, 'Search not available at the moment');
        return;
      }

      if (query.length < 2) {
        this.hideResults(searchResults);
        return;
      }

      const results = this.fuse.search(query);
      this.displayResults(results.slice(0, 8), searchResults); // Limit to 8 results
    }

    displayNoResults(searchResults: HTMLElement, message: string = 'No results found') {
      searchResults.innerHTML = `<div class="search-no-results">${message}</div>`;
      this.showResults(searchResults);
    }

    displayResults(results: FuseResult<SearchItem>[], searchResults: HTMLElement) {
      if (results.length === 0) {
        this.displayNoResults(searchResults);
        return;
      }

      const resultsHTML = results.map(result => {
        const item = result.item;
        const highlightedTitle = this.highlightMatches(item.title, result.matches?.filter((m: FuseResultMatch) => m.key === 'title'));
        
        return `
          <a href="${item.url}" class="search-result-item">
            <div class="search-result-type">${item.type === 'blog' ? 'Blog' : 'Trabalho'}</div>
            <div class="search-result-title">${highlightedTitle}</div>
            <div class="search-result-description">${this.truncateText(item.description, 120)}</div>
          </a>
        `;
      }).join('');

      searchResults.innerHTML = resultsHTML;
      this.showResults(searchResults);
    }

    highlightMatches(text: string, matches?: readonly FuseResultMatch[]): string {
      if (!matches || matches.length === 0) return text;
      
      let highlightedText = text;
      const match = matches[0];
      
      if (match.indices && match.indices.length > 0) {
        // Sort indices in reverse order to avoid index shifting issues
        const sortedIndices = [...match.indices].sort((a, b) => b[0] - a[0]);
        
        for (const [start, end] of sortedIndices) {
          const before = highlightedText.substring(0, start);
          const highlighted = highlightedText.substring(start, end + 1);
          const after = highlightedText.substring(end + 1);
          highlightedText = `${before}<mark style="background: var(--accent-regular); color: var(--gray-0); padding: 0.1em 0.2em; border-radius: 0.2em;">${highlighted}</mark>${after}`;
        }
      }
      
      return highlightedText;
    }

    truncateText(text: string, maxLength: number): string {
      if (text.length <= maxLength) return text;
      
      const truncated = text.substring(0, maxLength);
      const lastSpaceIndex = truncated.lastIndexOf(' ');
      
      if (lastSpaceIndex > maxLength * 0.8) {
        return truncated.substring(0, lastSpaceIndex) + '...';
      }
      
      return truncated + '...';
    }

    clearSearch(searchInput: HTMLInputElement, searchResults: HTMLElement) {
      searchInput.value = '';
      this.hideResults(searchResults);
    }

    showResults(searchResults: HTMLElement) {
      searchResults.classList.remove('hidden');
    }

    hideResults(searchResults: HTMLElement) {
      searchResults.classList.add('hidden');
    }
  }

  // Initialize search when DOM is loaded
  function initializeSearch() {
    // Wait a bit more to ensure all components are loaded
    setTimeout(() => {
      new SearchManager();
    }, 100);
  }

  // Multiple initialization strategies for better compatibility
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeSearch);
  } else if (document.readyState === 'interactive') {
    // DOM is loaded but resources may still be loading
    initializeSearch();
  } else {
    // Document and resources are fully loaded
    initializeSearch();
  }

  // Fallback initialization for any edge cases
  window.addEventListener('load', () => {
    // Check if search manager was already initialized
    const searchInput = document.querySelector('#search-input');
    if (searchInput && !searchInput.hasAttribute('data-search-initialized')) {
      initializeSearch();
    }
  });

  // Listen for custom fallback event
  document.addEventListener('initializeSearch', () => {
    const searchInput = document.querySelector('#search-input');
    if (searchInput && !searchInput.hasAttribute('data-search-initialized')) {
      initializeSearch();
    }
  });
</script>
